- name: Set ulimits
  pam_limits:
    domain: "{{ atscale_user }}"
    limit_type: "{{item.limit_type}}"
    limit_item: "{{item.limit_item}}"
    value: "{{item.value}}"
  with_items:
  - { limit_type: '-', limit_item: 'nproc', value: '{{ atscale_user_limit_nproc }}' }


- block:
  - name: Add the atscale principal for realm {{ security_options.realm | upper }}
    shell: "{{ kadmin_command }} -r {{ security_options.realm | upper }} -p {{ security_options.admin_principal }}/admin -w {{ security_options.admin_password }} -q \"add_principal -randkey atscale/{{ hostvars[groups['atscale-server']|first]['public_dns_name'] }}@{{ security_options.realm | upper }}\""
    register: addprinc_result

  - name: Fail if the atscale principal could not be created
    fail:
      msg: The atscale principal could not be created. Error is {{ addprinc_result.stderr }}
    when: addprinc_result is failed or not (addprinc_result.stdout is search("Principal .* created") or addprinc_result.stderr is search("Principal or policy already exists while creating"))  

  - name: Add the atscale keytab for realm {{ security_options.realm | upper }}
    shell: "{{ kadmin_command }} -r {{ security_options.realm | upper }} -p {{ security_options.admin_principal }}/admin -w {{ security_options.admin_password }} -q \"ktadd -k /home/atscale/atscale.keytab atscale/{{ hostvars[groups['atscale-server']|first]['public_dns_name'] }}@{{ security_options.realm | upper }}\""
    register: ktadd_result

  - name: Change the owner of the atscale keytab
    shell: "chown {{ atscale_user }} /home/atscale/atscale.keytab "
  when: security == "mit-kdc"


- name: Download Atscale package
  get_url:
    url: "{{ atscale_installer_url }}"
    dest: "{{ download_dir }}"
    timeout: 60
    mode: 0755

- name: Unpack atscale installer
  shell: "rpm -i {{ download_dir }}/{{atscale_installer_basename}}"
  environment:
    ATSCALE_USER: "{{ atscale_user }}"

- name: "Add atscale.yaml"
  template:
    src: "templates/atscale/atscale.yaml.j2"
    dest: "{{ atscale_install_target }}/conf/atscale.yaml"
    mode: 0755
    owner: "{{ atscale_user }}"
    group: "{{ atscale_group }}"

- name: Configuring atscale
  command: "sudo su - {{ atscale_user }} -c 'cd {{ atscale_install_target }}/versions/{{ as_version }} && ./bin/configurator.sh --first-time --automatic-install'"
  register: command_result
  ignore_errors: True

- name: "Configuring atscale call output"
  debug:
    var: command_result

- block: 

  - name: Stopping atscale if script exists
    command: "[[ -f {{ atscale_install_target }}/bin/atscale_stop ]] && sudo su - {{ atscale_user }} -c 'cd {{ atscale_install_target }}/ && ./bin/atscale_stop -f'"

  - name: Uninstall atscale rpm package
    shell: "rpm -e {{ atscale_installer_basename }}"

  - name: Delete atscale installation folder
    shell: "rm -rf {{ atscale_install_target }}"

  - name: Fail if error in Configuring Atscale
    fail:
      msg: "Error when configuring AtScale"
    failed_when: 
      - "'ERROR' in command_result.stdout"
      - "'Some configuration couldn't be verified' not in command_result.stdout"
  when: "'ERROR' in command_result.stdout"

- block:
  - name: Install check
    fail:
      msg: "Installation Failed."
    when: "'Installation Failed.' in command_result.stdout"

- name: Mark broken install
  shell: "touch /THIS_IS_A_BROKEN_INSTALL"
  when: "'Installation Failed.' in command_result.stdout"


# - name: Stopping atscale
#   shell: "{{ atscale_install_target }}/bin/atscale_stop -f"
#   become: yes
#   become_user: "{{ atscale_user }}"

# - name: Cleanup
#   shell: "{{ item }}"
#   with_items:
#     - "rm -rf {{ atscale_install_target }}/log/*"
